unit uExport_CSV;

interface
uses
	System.Classes, System.SysUtils, dmSCM, Vcl.Controls, dlgExportCSV,
	tdSetting, DateUtils, System.IOUtils;
	//
	//Vcl.Graphics, Vcl.Forms,
	//vcl.Dialogs,
	//System.Math,
	// System.UITypes,
	// System.Types,
	//SCMDefines,
type

	TExport_CSV = class
	private
		fErrStr, fStatStr, fPrgFileName: string;
		fCountEv, fCountHt: integer;
		function Construct_CTS_CSV_filename(AFilePath: string; out fn: string): boolean;
		function BuildCSVEventData(AFileName: string): boolean;

	protected

	public
		constructor Create();
		destructor Destroy; override;

		function Export_CTS_CSV(AfilePath: string): boolean;

		property ErrStr: string read FErrStr;
		property StatStr: string read FStatStr;
		property PrgFileName: string read fPrgFileName;

end;


implementation

constructor TExport_CSV.Create;
begin
	inherited;
	fErrStr := '';
	fStatStr := '';
	fCountEv := 0;
	fCountHt := 0;
	fPrgFileName := '';
end;

destructor TExport_CSV.Destroy;
begin
	// my cleanup code
	inherited;
end;

function TExport_CSV.Export_CTS_CSV(AfilePath: string): boolean;
var
passed: boolean;
begin
	fCountEv := 0;
	fCountHt := 0;
	fErrStr := '';
	fStatStr := '';
	fPrgFileName := '';
  passed := true;
	if not TDirectory.Exists(AfilePath) then
	begin
		fErrStr := 'The folder for export of the "Meet Program" (see Preferences) doesn''t exist.';
		passed := false;
	end;
	// build the fully qualified path, filename and extension.
	if passed then passed := Construct_CTS_CSV_filename(AFilePath, fPrgFileName);
	// Assert
	if passed then passed := BuildCSVEventData(fPrgFileName);
	result := passed;
end;

function TExport_CSV.Construct_CTS_CSV_filename(AFilePath: string; out fn: string): boolean;
var
	i: integer;
	dt: TDatetime;
	s: string;
	fs: TFormatSettings;
begin
	result := false;
	if (not Assigned(SCM)) or (not SCM.DataIsActive) then
	begin
		fErrStr := 'SwimClubMeet database couldn''t be accessed.';
		exit;
  end;
	fn := IncludeTrailingPathDelimiter(AFilePath); // Build the file name
	i := SCM.qrySession.FieldByName('SessionID').AsInteger;
try
	dt := SCM.qrySession.FieldByName('SessionStart').AsDateTime;
	fs := TFormatSettings.Create; // returns a record instance with default locale values.
	fs.DateSeparator := '-';
	fs.TimeSeparator := ':';
	fs.ShortDateFormat := 'yyyy-mm-dd';
	fs.LongTimeFormat := 'hh:nn:ss';
	dt := DateOf(dt) + TimeOf(Now); // timeof exporting file.
	s := DatetoStr(dt, fs);
except
	on E: Exception do
	begin
		s := '';
		fErrStr := 'Failed to assign a session date and time to the export file.';
		exit;
	end;
end;
	// example: C:\CTSDolphin\EventCSV\CTS_MeetProgram_113_01_02_2024.csv
	fn := fn + 'CTS_MeetProgram' + IntToStr(i) + '_' + s + '.csv';
	result := true;
end;

function TExport_CSV.BuildCSVEventData(AFileName: string): boolean;
var
	sl: TStringList;
	s, s2, s3: string;
	i, id: integer;
begin
	{
	The Load button lets the user load all event data from an event file.
	This is a CSV file and can be hand typed or generated by meet
	management software. Each line of this file should be formatted as follows:
	Event Number,EventName,Number of Heats,Number of Splits,Round ...

	Example:
	1A,Boys 50 M Free,4,1,P
	1B,Girls 50 M Free,5,1,P
	2A,Boys 100 M Breaststroke,2,2,P
	2B,Girls 100 M Breaststroke,2,2,P …

	The first line will be event index 1, the second line will be event index 2 and so on. Events
	will always come up in event index order although this can be overridden and events and
	heats may be run in any order.

	}
	result := false;
	if not SCM.DataIsActive then exit;

  sl := TStringlist.Create;
  try
		SCM.qryEvent.First();
		while not SCM.qryEvent.Eof do
    begin
      s := '';
      // Event Number – Up to 5 alpha-numeric characters. Example: 12B ...
			i := SCM.qryEvent.FieldByName('EventNum').AsInteger;
      s := s + IntToStr(i) + ',';
      // Event Name – Up to 25 alpha-numeric characters. Example: Men’s 50 Meter Freestyle
			s2 := SCM.qryDistance.FieldByName('Caption').AsString + ' ' +
			SCM.qryStroke.FieldByName('Caption').AsString;
			s3 := SCM.qryEvent.FieldByName('Caption').AsString;
      if Length(s3) > 0 then
        s2 := s2 + ' ' + s3;
      s := s + s2 + ',';
      // Get Number of Heats
       // Number of Heats – (0-99) Number of expected heats for the given event
			id := SCM.qryEvent.FieldByName('EventID').AsInteger;
			i := SCM.GetNumberOfHeats(id);
			fCountHt := fCountHt + i;
			s := s + IntToStr(i) + ',';
			{ TODO -oBSA : Implement Splits for TIME-DROPS }
				 // Number of Splits - NOT AVAILABLE IN THIS VERSION.
			s := s + '0,';
			{ Round .... requires db v1.1.5.4.
			* A: ALL  (CTS DOLPHIN - ref F912 ).
	 * P: Preliminary (DEFAULT)
			* Q: Quarterfinals
			* S: Semifinals
	 * F: Finals
			}
			// Round – “A” for all, “P” for prelim or “F” for final
			s := s + 'P';
			sl.Add(s);
			inc(fCountEv);
			SCM.qryEvent.Next;
		end;
		if not sl.IsEmpty then
		begin
      try
				sl.SaveToFile(AFileName);
				fStatstr := Format('Events: %d Heats: %d', [fCountEv, fCountHt]);
        result := true;
			except on E: Exception do
				fErrStr := 'Failed to save file: ' + E.Message;
      end;
    end;
  finally
    sl.free;
		SCM.qryEvent.First();
  end;
end;



end.
